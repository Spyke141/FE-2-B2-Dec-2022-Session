================================================================================
Higher Order Function Map
================================================================================
function findLength(arr) {
    arr = arr.map((str) => {
      if (str==null || str == 0 || str == undefined){
        return 0;       
      }
      else {
        console.log(str.length);
        return str.length;
        }
    })
    return arr;
}

let farr = ["Hi","My","Name",null, "is","Spyke",null]
findLength(farr);
module.exports = findLength;

================================================================================
Higher Order Function Filter
================================================================================
function filterByCity(arr) {
const output = arr.filter((emp) => {
          let inputString = emp.city;
          let lowerCaseString = inputString.toLowerCase();
               filteredArr = (lowerCaseString=="bangalore" || lowerCaseString=="hyderabad")
               // console.log(filteredArr);
               return filteredArr;
               })
console.log(output);
return output;
// for(let i=0;i<output.length;i++){
//    console.log(output);
// };
}


let fArr = [
{name: "John", city: "delhi" },
{name: "Peter", city: "bangalore" },
{name: "Mike", city: "Bangalore" },
{name: "Rachel", city: "Hyderabad" }
]
filterByCity(fArr);

module.exports = filterByCity;

================================================================================
For Each
================================================================================
function convertArray(arr) {
    const tArr = [];
    arr.forEach(function(_,a){
       tArr.push((a+1)*(arr[a]));
    })
    console.log(tArr);
    return tArr;
}

module.exports = convertArray;

let newArr = [1, 2, 2, 3, 1, 2];
convertArray(newArr);

================================================================================
Arrow Function
================================================================================
let modify = (array) => {
  let result = array.map( function(a){
    return isPrime(a) ? a+=1 : a*=2;
  })
  console.log(result);
  return result;
}

function isPrime(n) {
if(n == 0 || n == 1) {
    return false;
}
for(let i = 2 ; i*i <= n ; i++) {
    if(n%i == 0) {
        return false;
    }
}
return true;}

module.exports = modify;

let fArr = [1]
modify(fArr);

================================================================================
Try Catch
================================================================================
function errorHandler(x) {
    try {
  return getX(x);
}
catch(err){
return err;
}
}

function getX(x) {
    if(x == 5) {
        // console.log("error");
        return new Error("Error Occured");
    }
    // console.log(x);
    return x;
}

module.exports = errorHandler;

errorHandler(5);

================================================================================
Throw Error
================================================================================
function isAlphabet(X) {
 if (checkAlphabet(X)){
      return "Yes";
 }
 else {
      throw "Not Alphabet";
 }
};


function checkAlphabet(X) {
	let n = X.charCodeAt(0);
	let strStartsWithALetter = (n>=65 && n < 91) || ( n>=97 && n<123);
// You can Google about what is ASCII code to know more about
	// why are we using numbers like 65, 91, 97 & 123
if (strStartsWithALetter) {
	// Yes, it starts with an alphabet
	return true;
} else {
	// No, it doesnt start with an alphabet
	return false;
} 
}

module.exports = isAlphabet;
================================================================================

================================================================================
